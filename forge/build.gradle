plugins {
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'net.darkhax.curseforgegradle'
}

apply from: '../gradle/patreon.gradle'

archivesBaseName = "${mod_name}-Forge-${minecraft_version}"

// Enable Mixins
project.ext.mixin_enabled = project.file("src/main/resources/${mod_id}.forge.mixins.json").exists()
project.ext.mixin_refmap = "${mod_id}.refmap.json"
project.logger.lifecycle("Mixin ${project.ext.mixin_enabled ? 'enabled' : 'disabled'} for project ${project.name}.")

minecraft {

    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'

            property 'forge.logging.console.level', 'debug'
            property 'terminal.ansi', 'true'

            if (project.ext.mixin_enabled) {
                arg "-mixin.config=${mod_id}.common.mixins.json"
                arg "-mixin.config=${mod_id}.forge.mixins.json"
            }

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'forge.logging.console.level', 'debug'
            property 'terminal.ansi', 'true'

            if (project.ext.mixin_enabled) {
                arg "-mixin.config=${mod_id}.common.mixins.json"
                arg "-mixin.config=${mod_id}.forge.mixins.json"
            }

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bookshelf'

            mods {
                examplemod {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {

    from project(":common").sourceSets.main.resources

    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at
    // build time.
    buildProps.put('file', [jarVersion: project.version])

    if (project.hasProperty('patreon')) {

        def supporters = new ArrayList<String>()

        for (entry in project.ext.patreon.pledges) {

            def pledge = entry.value;

            if (pledge.isValid()) {

                supporters.add(pledge.getDisplayName())
            }
        }

        buildProps.put('mod_supporters', supporters.join(', '))
    }

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {

        expand buildProps
    }

    if (project.ext.mixin_enabled) {

        filesMatching('*.mixins.json') {

            expand buildProps
        }
    }
}

jar.finalizedBy('reobfJar')

// -- Mixin Support
if (project.ext.mixin_enabled) {

    mixin {

        // Tells the mixin plugin where to put the generated refmap file.
        add sourceSets.main, project.ext.mixin_refmap

        config "${mod_id}.common.mixins.json"
        config "${mod_id}.forge.mixins.json"
    }
}

// -- MAVEN PUBLISHING --
project.publishing {

    publications {

        mavenJava(MavenPublication) {
        
            artifactId project.archivesBaseName
            from components.java
        }
    }

    repositories {

        maven {

            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {

                credentials {

                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
    }
}

// CurseForge Publishing
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = findProperty('curse_auth')

    def mainFile = upload(curse_project, jar)
    mainFile.changelogType = 'markdown'
    mainFile.changelog = project.ext.mod_changelog
    mainFile.addJavaVersion('Java 17')

    // Append Patreon Supporters
    def patreonInfo = project.findProperty('patreon')

    if (patreonInfo) {
        mainFile.changelog += "\n\nThis project is made possible by [Patreon](${patreonInfo.campaignUrlTracked}) support from players like you. Thank you!\n\n${patreonInfo.pledgeLog}"
    }

    doLast {

        if (project.hasProperty('mod_homepage')) {

            project.ext.curse_file_url = "${mod_homepage}/files/${mainFile.curseFileId}"
        }
    }
}

// Forge's Jar Signer
def canSignJar = project.hasProperty('keyStore') && project.hasProperty('keyStorePass') && project.hasProperty('keyStoreKeyPass') && project.hasProperty('keyStoreAlias')

task signJar(type: net.minecraftforge.gradle.common.tasks.SignJar, dependsOn: jar) {

    onlyIf {

        canSignJar
    }

    if (canSignJar) {

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStoreKeyPass')
        inputFile = jar.archivePath
        outputFile = jar.archivePath

        tasks.assemble.finalizedBy signJar
    }

    else {

        project.logger.warn('Jar signing is disabled for this build. One or more keyStore properties are not specified.')
    }
}

// this is a workaround for ForgeGradle generating run config tasks during afterEvaluate, making it impossible to refer to them via tasks.getbyName()
tasks.withType(JavaExec) {
    if (name == 'runGameTestServer') {
        tasks.test.dependsOn(it)
    }
}
