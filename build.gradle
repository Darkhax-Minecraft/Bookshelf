buildscript {

    repositories {

        jcenter()

        maven {

            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }

        maven {

            url "https://plugins.gradle.org/m2/"
        }
        
        maven {
        
            url = 'http://maven.modmuss50.me/'
        }
    }

    dependencies {

        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'ModsIOUpload:ModsIOUpload:2.1.15'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

apply plugin: "maven"
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: 'net.cazzar.gradle.modsio'
apply plugin: "org.sonarqube"

sourceCompatibility = 1.8
targetCompatibility = 1.8
    
group = "net.darkhax.bookshelf"
archivesBaseName = "Bookshelf"
version = getVersionFromJava(file("src/main/java/net/darkhax/bookshelf/lib/Constants.java"))

//Defines the MC environment information.
minecraft {

    version = "${version_forge}"
    mappings = "${version_mcp}"
    runDir = "run"
    useDepAts = true
}

//Defines basic patterns for pulling various dependencies.
repositories {

    maven {
    
        url "https://jitpack.io"
    }
}

dependencies {

    deobfCompile 'com.github.Azanor:Baubles:803f411'
}

//Handles basic resources such as mcmod.info
processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {

        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {

        exclude 'mcmod.info'
    }
    
   rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {

	manifest {
	
	    attributes 'FMLAT': 'bookshelf_at.cfg',  "FMLCorePlugin": "net.darkhax.bookshelf.asm.BookshelfLoadingPlugin", "FMLCorePluginContainsFMLMod": "true"
	}
}

//Pulls the build version from a Java file.
String getVersionFromJava(File file) {

    String release = "0";
    String update = "0";
    String patch = "0";

    String build = System.getenv("BUILD_NUMBER") ? System.getenv("BUILD_NUMBER") : "0";
    def outfile = "";
    def ln = System.getProperty("line.separator")

    String prefix = "public static final String VERSION_NUMBER = \"";
    file.eachLine {
        String s ->

            String v = s.trim();

        if (v.startsWith(prefix)) {

            v = v.substring(prefix.length(), v.length() - 2);
            String[] pts = v.split("\\.");

            release = pts[0];
            update = pts[1];
            patch = pts[2];
            s = s.replaceAll(".[0-9]+\";", ".${build}\";");
        }

        outfile += (s + ln);
    }

    file.write(outfile);

    return "${version_minecraft}-$release.$update.$patch.$build";
}

//Creates the source jar.
task sourcesJar(type: Jar, dependsOn: classes) {

    from sourceSets.main.allSource
    classifier = 'sources'
}

//Creates the JavaDoc jar.
task javadocJar(type: Jar, dependsOn: javadoc) {

    from javadoc.destinationDir
    classifier = 'javadoc'
}

//Creates the deobfuscated jar.
task deobfJar(type: Jar) {

    from sourceSets.main.output
    classifier = "deobf"
}

//Adds the deobf, source and javadoc jars to the build artifacts.
artifacts {

    archives deobfJar
    archives sourcesJar
    archives javadocJar
}

//Uploads the artifacts to the maven server.
uploadArchives {

    repositories {

        mavenDeployer {

            repository(url: "file:///var/www/html/maven")
        }
    }
}

//Prevents incomplete JavaDocs from preventing a build on Java 8.
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {

            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

// Creates a changelog based on the git changelog. Based on code by Kobata
// https://github.com/Inventory-Tweaks/inventory-tweaks/blob/develop/build.gradle
def getGitChangelog = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def gitHash = System.getenv("GIT_COMMIT")
        def gitPrevHash = System.getenv("GIT_PREVIOUS_COMMIT")
        def travisRange = System.getenv("TRAVIS_COMMIT_RANGE")
        if(gitHash && gitPrevHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:- %s', '' + gitPrevHash + '...' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else if(travisRange) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:- %s', '' + travisRange
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else {
            return "";
        }
    } catch(ignored) {
        return "";
    }
}

//Provides the basic CurseForge upload details
curseforge {

    //Sets the API from the system environment, if available.
    apiKey = System.getenv("curseForgeApiKey") ? System.getenv("curseForgeApiKey") : "0";

    project {

        id = "${id_curse}"
        releaseType = 'alpha'
        changelog = getGitChangelog()
        changelogType = 'markdown'

        addGameVersion "${version_minecraft}"
        
        addArtifact(deobfJar)
        addArtifact(sourcesJar)
        addArtifact(javadocJar)
    }
}

modsIO {
    
    key = System.getenv("ModsIOApiKey") ? System.getenv("ModsIOApiKey") : '0'
    
    project {
    
        artifact = jar.archivePath
        modid = "${id_modsio}"
        minecraft = "${version_minecraft}"
        changelog = getGitChangelog()
        current = true
    }
}

sonarqube {

    properties {
        property "sonar.host.url", "https://sonarqube.com"
        property "sonar.login", System.getenv("sonarQubeApiKey")
    }
}