// Loads properties from a file containing environmental secrets.
import groovy.json.JsonSlurper

// Auto detects a secret file and injects it.
if (rootProject.hasProperty('secretFile')) {
    project.logger.lifecycle('Automatically loading properties from the secretFile')
    final def secretsFile = rootProject.file(rootProject.findProperty('secretFile'))
    if (secretsFile.exists() && secretsFile.name.endsWith('.json')) {
        loadProperties(secretsFile)
    }
    else {
        project.logger.lifecycle("Properties could not be read from the secretFile because it does not exist. ${secretsFile}")
    }
}
else {
    project.logger.lifecycle('The secretFile property has not been set. Some API tokens will not be available.')
}

// Loads properties using a specified json file.
def loadProperties(propertyFile) {
    if (propertyFile.exists()) {
        propertyFile.withReader {
            Map propMap = new JsonSlurper().parse it
            for (entry in propMap) {
                // Filter entries that use _comment in the key.
                if (!entry.key.endsWith('_comment')) {
                    project.ext.set(entry.key, entry.value)
                }
            }
            project.logger.lifecycle("Successfully loaded ${propMap.size()} environment secrets.")
            propMap.clear()
        }
    } else {
        project.logger.warn("Could not find property file! Expected: ${propertyFile}")
    }
}