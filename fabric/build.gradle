plugins {
    id 'idea'
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

apply from: '../gradle/property_helper.gradle'
apply from: '../gradle/patreon.gradle'

base {
    archivesName = "${mod_name}-Fabric-${minecraft_version}"
}

// Enable Mixins
project.ext.mixin_enabled = project.file("src/main/resources/${mod_id}.fabric.mixins.json").exists()
project.ext.mixin_refmap = "${archivesBaseName}-refmap.json"
project.logger.lifecycle("Mixin ${project.ext.mixin_enabled ? 'enabled' : 'disabled'} for project ${project.name}.")

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")
}

sourceSets {
    gametest {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output

        compileClasspath += project(":common").sourceSets.main.compileClasspath
        runtimeClasspath += project(":common").sourceSets.main.runtimeClasspath
        compileClasspath += project(":common").sourceSets.main.output
        runtimeClasspath += project(":common").sourceSets.main.output
    }
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        gametestServer {
            server()
            source(project.sourceSets.gametest)
            vmArg("-Dfabric-api.gametest")
            vmArg("-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml")
            setConfigName("Fabric Game Test (Server)")
            runDir("build/gametest")
        }
        // Use to debug tests
        gametestClient {
            client()
            source(project.sourceSets.gametest)
            setConfigName("Fabric Game Test (Client)")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {

    from project(":common").sourceSets.main.resources

    def buildProps = project.properties.clone()

    if (project.hasProperty('patreon')) {

        def supporters = new ArrayList<String>()

        for (entry in project.ext.patreon.pledges) {

            def pledge = entry.value;

            if (pledge.isValid()) {

                supporters.add(pledge.getDisplayName())
            }
        }

        buildProps.put('mod_supporters', supporters.join(/","/))
    }

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {

        expand buildProps
    }

    if (project.ext.mixin_enabled) {

        filesMatching('*.mixins.json') {

            expand buildProps
        }
    }
}


tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

// -- MAVEN PUBLISHING --
project.publishing {

    publications {

        mavenJava(MavenPublication) {

            artifactId = base.archivesName.get()
            from components.java
        }
    }

    repositories {

        maven {

            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {

                credentials {

                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
    }
}

// CurseForge Publishing
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = findProperty('curse_auth')

    def mainFile = upload(curse_project, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = project.ext.mod_changelog
    mainFile.addJavaVersion('Java 17')
    mainFile.addModLoader('Fabric')
    mainFile.addModLoader('Quilt')
    mainFile.releaseType = 'release'
    mainFile.addGameVersion('Server', 'Client')

    // Append Patreon Supporters
    def patreonInfo = project.findProperty('patreon')

    if (patreonInfo) {
        mainFile.changelog += "\n\nThis project is made possible by [Patreon](${patreonInfo.campaignUrlTracked}) support from players like you. Thank you!\n\n${patreonInfo.pledgeLog}"
    }

    doLast {

        if (project.hasProperty('mod_homepage')) {

            project.ext.curse_file_url = "${mod_homepage}/files/${mainFile.curseFileId}"
        }
    }
}

// Modrinth
modrinth {

    def patreonInfo = project.findProperty('patreon')
    def changelog = project.ext.mod_changelog

    if (patreonInfo) {
        changelog += "\n\nThis project is made possible by [Patreon](${patreonInfo.campaignUrlTracked}) support from players like you. Thank you!\n\n${patreonInfo.pledgeLog}"
    }

    token.set(project.findProperty('modrinth_auth'))
    projectId.set(modrinth_project)
    changelog = changelog
    versionName.set("${mod_name}-Fabric-${minecraft_version}-$version")
    versionType.set("release")
    uploadFile.set(tasks.remapJar)
    dependencies {
        required.project("fabric-api")
    }
}